import Homey, { DiscoveryResult } from 'homey';
import { P1ibConnector, MeterReading } from './p1ib.js';

interface P1ibSettings {
  p1ib_address: string;
}

/*interface DiscoveryResult {
  id: string;
  address: string;
  port: number;
  [key: string]: any;
}*/

class P1ibDevice extends Homey.Device {
  private p1ibConnector!: P1ibConnector;
  private pollTimeout!: NodeJS.Timeout;

  async onInit(): Promise<void> {
    this.log('p1ib has been initialized');

    const settings = this.getSettings() as P1ibSettings;
    this.log('p1ib address:', settings.p1ib_address);

    this.p1ibConnector = new P1ibConnector(settings.p1ib_address);
    await this.update();

    this.pollTimeout = this.homey.setInterval(async () => {
      await this.update();
    }, 10000);
  }

  private async update(): Promise<void> {
    try {
      if (!this.p1ibConnector.address) {
        this.log('No address has been set - skipping update');
        return;
      }

      const meterData: MeterReading = await this.p1ibConnector.readMeterData();
      this.log(meterData);

      const power = meterData.momentaryPowerImport - meterData.momentaryPowerExport;

      await Promise.all([
        this.setCapabilityValue('measure_power', power),
        this.setCapabilityValue('measure_power.export', meterData.momentaryPowerExport),
        this.setCapabilityValue('measure_power.import', meterData.momentaryPowerImport),
        this.setCapabilityValue('meter_power.import', meterData.activeEnergyImport),
        this.setCapabilityValue('meter_power.export', meterData.activeEnergyExport),
        this.setCapabilityValue('measure_current.l1', meterData.currentL1),
        this.setCapabilityValue('measure_current.l2', meterData.currentL2),
        this.setCapabilityValue('measure_current.l3', meterData.currentL3),
        this.setCapabilityValue('measure_voltage.l1', meterData.voltageL1),
        this.setCapabilityValue('measure_voltage.l2', meterData.voltageL2),
        this.setCapabilityValue('measure_voltage.l3', meterData.voltageL3),
        this.setCapabilityValue('measure_power.l1', meterData.powerL1),
        this.setCapabilityValue('measure_power.l2', meterData.powerL2),
        this.setCapabilityValue('measure_power.l3', meterData.powerL3),
        this.setAvailable(),
      ]).catch(this.error);
    } catch (error) {
      this.error('error:', error);
      await this.setUnavailable().catch(this.error);
    }
  }

  async onAdded(): Promise<void> {
    this.log('p1ib has been added');
  }

  async onSettings({
    oldSettings,
    newSettings,
    changedKeys,
  }: {
    oldSettings: { [key: string]: string | number | boolean | null | undefined };
    newSettings: { [key: string]: string | number | boolean | null | undefined };
    changedKeys: string[];
  }): Promise<void> {
    this.log('p1ib settings were changed');

    if (typeof newSettings.p1ib_address === 'string') {
      this.p1ibConnector.address = newSettings.p1ib_address;
    }
  }

  async onRenamed(name: string): Promise<void> {
    this.log('p1ib was renamed');
  }

  async onDeleted(): Promise<void> {
    this.log('p1ib has been deleted');
    this.homey.clearInterval(this.pollTimeout);
  }

  onDiscoveryResult({
    discoveryResult,
  }: {
    discoveryResult: DiscoveryResult;
  }): boolean {
    this.log('onDiscoveryResult:', discoveryResult);
    return discoveryResult.id === this.getData().id;
  }

  async onDiscoveryAvailable(discoveryResult: DiscoveryResult): Promise<void> {
    this.log('onDiscoveryAvailable:', discoveryResult);
    const p1ibAddress = `${discoveryResult.address}:${discoveryResult.port}`;

    await this.setSettings({ p1ib_address: p1ibAddress });
    this.p1ibConnector.address = p1ibAddress;
  }

  async onDiscoveryAddressChanged(discoveryResult: DiscoveryResult): Promise<void> {
    this.log('onDiscoveryAddressChanged');
    const p1ibAddress = `${discoveryResult.address}:${discoveryResult.port}`;

    await this.setSettings({ p1ib_address: p1ibAddress });
    this.p1ibConnector.address = p1ibAddress;
  }

  onDiscoveryLastSeenChanged(discoveryResult: DiscoveryResult): void {
    this.log('onDiscoveryLastSeenChanged');
  }
}

export default P1ibDevice;
